
public class MyList {

public Node head; 
class Node
{
		int data; 
		Node next; //reference of the same class, self referential class

		Node(int d) 
		{ 
			data = d; 
			next = null; 
		} 
}

	public void add( int d) 
	{ 
		Node new_node = new Node(d); 
		if (head == null) { 
			head = new_node; 
		} 
		else { 
			Node last =head;
			while (last.next != null) { 
				last = last.next; 
			} 

			last.next = new_node; 
		} 

	} 

	// Method to print the LinkedList. 
	public  void printList() 
	{ 
		Node currNode = head; 
		System.out.print("LinkedList: "); 
		while (currNode != null) { 
			System.out.print(currNode.data + "===>"); 
			currNode = currNode.next; 
			
		} 
		System.out.println("NULL"); 
	} 
	public  int Size()
	{
		int Count=0;
		Node currNode = head; 
		
		while (currNode != null) { 
			Count++; 
			currNode = currNode.next; 
			}
		return Count;
	}
	
	public  void insertNode(int pos,int Val) 
	{ 
				Node new_node = new Node(Val); 
			if(pos ==1)
			{
				new_node.next=head;
				head=new_node;
			}
			else
			{
				Node currNode = head; 
			for(int i=1;i<pos-1;i++)
			{
			currNode = currNode.next; 
			}
			
			new_node.next=currNode.next;
			currNode.next=new_node;
			}
			
	}
			
	
	public  void deletNode(int Val) 
	{ 
		int flag=0;
		if(head.data==Val)
		{
			flag=1;
			System.out.println("Node Deleted "+head.data);
			head=head.next;
		}
		
		
		else
		{
			Node currNode = head; 
			while(currNode.next!=null)
			{
			if(currNode.next.data==Val)
				{
				flag=1;
				System.out.println("Node Deleted "+currNode.next.data);
				currNode.next=currNode.next.next;
			
				}
			else
				currNode = currNode.next; 
			}
		}
		if(flag == 0)
			System.out.println(Val +" Not Found in Linked List ");
			
}
}