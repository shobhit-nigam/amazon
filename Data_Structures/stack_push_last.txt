
public class Stack {
	public Node head; 
	class Node
	{
			int data; 
			Node next; //reference of the same class, self referential class

			Node(int d) 
			{ 
				data = d; 
				next = null; 
			} 
	}

		public void push( int d) 
		{ 
			Node new_node = new Node(d); 
			if (head == null) { 
				head = new_node; 
			} 
			else { 
				Node last =head;
				while (last.next != null) { 
					last = last.next; 
				} 

				last.next = new_node; 
			} 

		} 

		// Method to print the LinkedList. 
		public  void PrintStack() 
		{ 
			Node currNode = head; 
			System.out.print("Stack Elements: "); 
			while (currNode != null) { 
				System.out.print(currNode.data + "===>"); 
				currNode = currNode.next; 
				
			} 
			System.out.println("NULL"); 
		} 
		
		
		
				
		
		public  void Pop() 
		{ 
		
			if(head==null)
			{
				System.out.println("Stack is Empty");
				
			}
			else if(head.next==null)
			{
				System.out.println("Popped Element "+head.data);
				head=null;
				
			}
			
			else
			{
				Node currNode = head; 
				while(currNode.next.next!=null)
				{
					currNode = currNode.next; 
				}
				System.out.println("Popped Element"+currNode.next.data);
				currNode.next=null;
				
			}
			
				
	}
		public  void Top() 
		{ 
		
			if(head==null)
			{
				System.out.println("Stack is Empty");
				
			}
			else if(head.next==null)
			{
				System.out.println("Popped Element "+head.data);	
			}
			
			else
			{
				Node currNode = head; 
				while(currNode.next.next!=null)
				{
					currNode = currNode.next; 
				}
				System.out.println("Popped Element"+currNode.next.data);
			}
			
				
	}
}

import java.util.Scanner;


public class myStack {

	public static void main(String[] args) {
		Stack stack1 = new Stack(); 
		Scanner in=new Scanner(System.in);

		while(true){
			
		System.out.print("1: Push\n2: Pop\n3: Top\n4: PrintStack\n0: exit");
		int choice=in.nextInt();
		switch(choice)
		{
		case 1:
			System.out.println("enter element to push");
			stack1.push(in.nextInt()); 
			break;
		case 2:
			stack1.Pop(); 
			break; 
		case 3:
			stack1.Top(); 
			break; 
		case 4:
			stack1.PrintStack(); 
			break; 
		default :
			System.out.println("wrong choice");
			break;
		}

	}
	}
}

