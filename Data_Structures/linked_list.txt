// code for linked list (add, delete, insert, size, display)
// two classes:
//	one class MyList for the entire alogorithm implementation
//	one class Main, for the main function


public class MyList {
	
	public Node head;
	
	class Node {
		int data;
		Node next;
		
		public Node(int d) {
			data = d;
			next = null;
		} 
		
	}
	public void add(int d) {
		Node new_node = new Node(d);
		if(head==null) {
			head = new_node;
		}
		else {
			Node last = head;
			while(last.next!=null) {
				last = last.next;
			}
			last.next = new_node;
		}
		
	}
	public void insertNode(int pos, int val) {
		Node new_node = new Node(val);
		if(pos==1) {
			new_node.next = head;
			head = new_node;
		}
		else
		{
			Node currNode = head;
			for(int i=1; i<pos-1; i++) {
				currNode = currNode.next;
			}
			new_node.next = currNode.next;
			currNode.next = new_node;
		}
	}
	public void deleteNode(int val) {
		int flag = 0;
		if(head.data==val)
		{
			flag = 1;
			System.out.println("node deleted"+head.data);
			head = head.next;
		}
		else {
			Node currNode = head;
			while(currNode.next!=null) {
				if(currNode.next.data==val) {
					flag = 1;
					System.out.println("Node deleted "+currNode.next.data);
					currNode.next = currNode.next.next;
				}
				else {
					currNode = currNode.next;
				}
			}
		}
		if(flag==0) {
			System.out.println(val+" not found");
		}
		
	}
	public void display()
	{
		Node currNode = head;
		System.out.println("list =");
		while(currNode != null) {
			System.out.print(currNode.data+"-->");
			currNode = currNode.next;
		}
		System.out.println("list has ended");
	}

	public int size() {
		int count = 0;
		Node currNode = head;
		
		while(currNode!= null) {
			count++;
			currNode = currNode.next;
		}
		return count;
	}
	

}



public class Main {

	public static void main(String[] args) {
		MyList ml = new MyList();
		ml.add(23);
		ml.add(26);
		ml.add(24);
		ml.display();
		System.out.println(ml.size());
		ml.insertNode(2, 100);
		ml.display();
		ml.deleteNode(26);
		System.out.println(ml.size());
		ml.display();
		ml.deleteNode(22);
		ml.display();
		ml.insertNode(4, 200);
		ml.display();

	}

}

